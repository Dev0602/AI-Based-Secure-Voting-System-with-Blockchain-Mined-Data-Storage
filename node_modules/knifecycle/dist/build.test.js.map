{"version":3,"file":"build.test.js","names":["describe","aProvider","service","mockedDepsHash","NODE_ENV","constant","dep1","initializer","inject","type","name","dep2","dep3","initAutoloader","singleton","$autoload","Promise","resolve","path","reject","YError","it","$","Knifecycle","register","initInitializerBuilder","buildInitializer","run","content","assert","equal","modules"],"sources":["../src/build.test.ts"],"sourcesContent":["import assert from 'assert';\nimport YError from 'yerror';\nimport initInitializerBuilder from './build';\nimport Knifecycle, { initializer, constant } from '.';\nimport type { BuildInitializer } from './build';\n\ndescribe('buildInitializer', () => {\n  async function aProvider() {\n    return {\n      service: 'PROVIDER_SERVICE',\n    };\n  }\n  const mockedDepsHash = {\n    NODE_ENV: constant('NODE_ENV', 'development'),\n    dep1: initializer(\n      {\n        inject: [],\n        type: 'service',\n        name: 'dep1',\n      },\n      aProvider,\n    ),\n    dep2: initializer(\n      {\n        inject: ['dep1', 'NODE_ENV'],\n        type: 'provider',\n        name: 'dep2',\n      },\n      aProvider,\n    ),\n    dep3: initializer(\n      {\n        inject: ['dep2', 'dep1', '?depOpt'],\n        type: 'service',\n        name: 'dep3',\n      },\n      aProvider,\n    ),\n  };\n  const initAutoloader = initializer(\n    {\n      name: '$autoload',\n      type: 'service',\n      inject: [],\n      singleton: true,\n    },\n    async () => {\n      return async function $autoload(name) {\n        return mockedDepsHash[name]\n          ? Promise.resolve({\n              path: `./services/${name}`,\n              initializer: mockedDepsHash[name],\n            })\n          : Promise.reject(new YError('E_UNMATCHED_DEPENDENCY', name));\n      };\n    },\n  );\n\n  it('should build an initialization module', async () => {\n    const $ = new Knifecycle();\n\n    $.register(constant('PWD', '~/my-project'));\n    $.register(initAutoloader);\n    $.register(initInitializerBuilder);\n\n    const { buildInitializer } = await $.run<{\n      buildInitializer: BuildInitializer;\n    }>(['buildInitializer']);\n\n    const content = await buildInitializer(['dep1', 'finalMappedDep>dep3']);\n    assert.equal(\n      content,\n      `\n// Definition batch #0\nimport initDep1 from './services/dep1';\nconst NODE_ENV = \"development\";\n\n// Definition batch #1\nimport initDep2 from './services/dep2';\n\n// Definition batch #2\nimport initDep3 from './services/dep3';\n\nexport async function initialize(services = {}) {\n  // Initialization batch #0\n  const batch0 = {\n    dep1: initDep1({\n    }),\n    NODE_ENV: Promise.resolve(NODE_ENV),\n  };\n\n  await Promise.all(\n    Object.keys(batch0)\n    .map(key => batch0[key])\n  );\n\n  services['dep1'] = await batch0['dep1'];\n  services['NODE_ENV'] = await batch0['NODE_ENV'];\n\n  // Initialization batch #1\n  const batch1 = {\n    dep2: initDep2({\n      dep1: services['dep1'],\n      NODE_ENV: services['NODE_ENV'],\n    }).then(provider => provider.service),\n  };\n\n  await Promise.all(\n    Object.keys(batch1)\n    .map(key => batch1[key])\n  );\n\n  services['dep2'] = await batch1['dep2'];\n\n  // Initialization batch #2\n  const batch2 = {\n    dep3: initDep3({\n      dep2: services['dep2'],\n      dep1: services['dep1'],\n      depOpt: services['depOpt'],\n    }),\n  };\n\n  await Promise.all(\n    Object.keys(batch2)\n    .map(key => batch2[key])\n  );\n\n  services['dep3'] = await batch2['dep3'];\n\n  return {\n    dep1: services['dep1'],\n    finalMappedDep: services['dep3'],\n  };\n}\n`,\n    );\n  });\n\n  it('should allows to use commonjs', async () => {\n    const $ = new Knifecycle();\n\n    $.register(constant('PWD', '~/my-project'));\n    $.register(initAutoloader);\n    $.register(initInitializerBuilder);\n\n    const { buildInitializer } = await $.run<{\n      buildInitializer: BuildInitializer;\n    }>(['buildInitializer']);\n\n    const content = await buildInitializer(['dep1', 'finalMappedDep>dep3'], {\n      modules: 'commonjs',\n    });\n    assert.equal(\n      content,\n      `\n// Definition batch #0\nconst initDep1 = (() => { const m = require('./services/dep1'); return m && m.default || m; })();\nconst NODE_ENV = \"development\";\n\n// Definition batch #1\nconst initDep2 = (() => { const m = require('./services/dep2'); return m && m.default || m; })();\n\n// Definition batch #2\nconst initDep3 = (() => { const m = require('./services/dep3'); return m && m.default || m; })();\n\nmodule.exports = {}; module.exports.initialize = async function initialize(services = {}) {\n  // Initialization batch #0\n  const batch0 = {\n    dep1: initDep1({\n    }),\n    NODE_ENV: Promise.resolve(NODE_ENV),\n  };\n\n  await Promise.all(\n    Object.keys(batch0)\n    .map(key => batch0[key])\n  );\n\n  services['dep1'] = await batch0['dep1'];\n  services['NODE_ENV'] = await batch0['NODE_ENV'];\n\n  // Initialization batch #1\n  const batch1 = {\n    dep2: initDep2({\n      dep1: services['dep1'],\n      NODE_ENV: services['NODE_ENV'],\n    }).then(provider => provider.service),\n  };\n\n  await Promise.all(\n    Object.keys(batch1)\n    .map(key => batch1[key])\n  );\n\n  services['dep2'] = await batch1['dep2'];\n\n  // Initialization batch #2\n  const batch2 = {\n    dep3: initDep3({\n      dep2: services['dep2'],\n      dep1: services['dep1'],\n      depOpt: services['depOpt'],\n    }),\n  };\n\n  await Promise.all(\n    Object.keys(batch2)\n    .map(key => batch2[key])\n  );\n\n  services['dep3'] = await batch2['dep3'];\n\n  return {\n    dep1: services['dep1'],\n    finalMappedDep: services['dep3'],\n  };\n}\n`,\n    );\n  });\n});\n"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAGAA,QAAQ,CAAC,kBAAD,EAAqB,MAAM;EACjC,eAAeC,SAAf,GAA2B;IACzB,OAAO;MACLC,OAAO,EAAE;IADJ,CAAP;EAGD;;EACD,MAAMC,cAAc,GAAG;IACrBC,QAAQ,EAAE,IAAAC,UAAA,EAAS,UAAT,EAAqB,aAArB,CADW;IAErBC,IAAI,EAAE,IAAAC,aAAA,EACJ;MACEC,MAAM,EAAE,EADV;MAEEC,IAAI,EAAE,SAFR;MAGEC,IAAI,EAAE;IAHR,CADI,EAMJT,SANI,CAFe;IAUrBU,IAAI,EAAE,IAAAJ,aAAA,EACJ;MACEC,MAAM,EAAE,CAAC,MAAD,EAAS,UAAT,CADV;MAEEC,IAAI,EAAE,UAFR;MAGEC,IAAI,EAAE;IAHR,CADI,EAMJT,SANI,CAVe;IAkBrBW,IAAI,EAAE,IAAAL,aAAA,EACJ;MACEC,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CADV;MAEEC,IAAI,EAAE,SAFR;MAGEC,IAAI,EAAE;IAHR,CADI,EAMJT,SANI;EAlBe,CAAvB;EA2BA,MAAMY,cAAc,GAAG,IAAAN,aAAA,EACrB;IACEG,IAAI,EAAE,WADR;IAEED,IAAI,EAAE,SAFR;IAGED,MAAM,EAAE,EAHV;IAIEM,SAAS,EAAE;EAJb,CADqB,EAOrB,YAAY;IACV,OAAO,eAAeC,SAAf,CAAyBL,IAAzB,EAA+B;MACpC,OAAOP,cAAc,CAACO,IAAD,CAAd,GACHM,OAAO,CAACC,OAAR,CAAgB;QACdC,IAAI,EAAG,cAAaR,IAAK,EADX;QAEdH,WAAW,EAAEJ,cAAc,CAACO,IAAD;MAFb,CAAhB,CADG,GAKHM,OAAO,CAACG,MAAR,CAAe,IAAIC,eAAJ,CAAW,wBAAX,EAAqCV,IAArC,CAAf,CALJ;IAMD,CAPD;EAQD,CAhBoB,CAAvB;EAmBAW,EAAE,CAAC,uCAAD,EAA0C,YAAY;IACtD,MAAMC,CAAC,GAAG,IAAIC,SAAJ,EAAV;IAEAD,CAAC,CAACE,QAAF,CAAW,IAAAnB,UAAA,EAAS,KAAT,EAAgB,cAAhB,CAAX;IACAiB,CAAC,CAACE,QAAF,CAAWX,cAAX;IACAS,CAAC,CAACE,QAAF,CAAWC,cAAX;IAEA,MAAM;MAAEC;IAAF,IAAuB,MAAMJ,CAAC,CAACK,GAAF,CAEhC,CAAC,kBAAD,CAFgC,CAAnC;IAIA,MAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAAC,CAAC,MAAD,EAAS,qBAAT,CAAD,CAAtC;;IACAG,eAAA,CAAOC,KAAP,CACEF,OADF,EAEG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjEI;EAmED,CA/EC,CAAF;EAiFAP,EAAE,CAAC,+BAAD,EAAkC,YAAY;IAC9C,MAAMC,CAAC,GAAG,IAAIC,SAAJ,EAAV;IAEAD,CAAC,CAACE,QAAF,CAAW,IAAAnB,UAAA,EAAS,KAAT,EAAgB,cAAhB,CAAX;IACAiB,CAAC,CAACE,QAAF,CAAWX,cAAX;IACAS,CAAC,CAACE,QAAF,CAAWC,cAAX;IAEA,MAAM;MAAEC;IAAF,IAAuB,MAAMJ,CAAC,CAACK,GAAF,CAEhC,CAAC,kBAAD,CAFgC,CAAnC;IAIA,MAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAAC,CAAC,MAAD,EAAS,qBAAT,CAAD,EAAkC;MACtEK,OAAO,EAAE;IAD6D,CAAlC,CAAtC;;IAGAF,eAAA,CAAOC,KAAP,CACEF,OADF,EAEG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjEI;EAmED,CAjFC,CAAF;AAkFD,CAvNO,CAAR"}