{"version":3,"file":"jwt.test.js","names":["describe","log","jest","fn","time","afterEach","mockReset","test","initJWTService","JWT","duration","tolerance","algorithms","YError","err","expect","errorCode","code","errorParams","params","logs","mock","calls","times","toMatchInlineSnapshot","ENV","JWT_SECRET","mockReturnValueOnce","Date","getTime","jwt","token","sign","userId","organisationId","JWT_SECRET_ENV_NAME","REFRESH_JWT_SECRET","SECRET_NAME","secretEnvName","decoded","verify"],"sources":["../src/jwt.test.ts"],"sourcesContent":["import YError from 'yerror';\nimport initJWTService from './jwt';\nimport type { JWT_CONFIG } from './jwt';\n\ndescribe('jwt service', () => {\n  const log = jest.fn();\n  const time = jest.fn();\n\n  afterEach(() => {\n    log.mockReset();\n    time.mockReset();\n  });\n\n  describe('initializer', () => {\n    test('should fail without secret', async () => {\n      try {\n        await initJWTService({\n          JWT: {\n            duration: '2d',\n            tolerance: '2h',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_NO_JWT_SECRET\",\n            \"errorParams\": Array [],\n            \"logs\": Array [],\n            \"times\": Array [],\n          }\n        `);\n      }\n    });\n\n    test('should fail without algorithms', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            duration: '2d',\n            tolerance: '2h',\n            algorithms: [],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_NO_JWT_ALGORITHMS\",\n            \"errorParams\": Array [],\n            \"logs\": Array [],\n            \"times\": Array [],\n          }\n        `);\n      }\n    });\n\n    test('should fail without duration', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            tolerance: '2h',\n            algorithms: ['HS256'],\n          } as JWT_CONFIG,\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_BAD_JWT_DURATION\",\n            \"errorParams\": Array [],\n            \"logs\": Array [],\n            \"times\": Array [],\n          }\n        `);\n      }\n    });\n\n    test('should fail with a bad tolerance', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            duration: '2h',\n            tolerance: '',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_BAD_JWT_TOLERANCE\",\n            \"errorParams\": Array [\n              \"\",\n              \"val is not a non-empty string or a valid number. val=\\\\\"\\\\\"\",\n            ],\n            \"logs\": Array [],\n            \"times\": Array [],\n          }\n        `);\n      }\n    });\n\n    test('should fail with a uninterpreted duration', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            duration: 'q',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_BAD_JWT_DURATION\",\n            \"errorParams\": Array [\n              \"q\",\n            ],\n            \"logs\": Array [],\n            \"times\": Array [],\n          }\n        `);\n      }\n    });\n\n    test('should fallback to default tolerance', async () => {\n      await initJWTService({\n        ENV: {\n          JWT_SECRET: 'test',\n        },\n        JWT: {\n          duration: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n    });\n  });\n\n  describe('sign', () => {\n    test('should work', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService<{\n        userId: number;\n        organisationId: number;\n      }>({\n        ENV: {\n          JWT_SECRET: 'secret',\n        },\n        JWT: {\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n      const token = await jwt.sign({\n        userId: 2,\n        organisationId: 3,\n      });\n\n      expect({\n        token,\n        logs: log.mock.calls,\n        times: time.mock.calls,\n      }).toMatchInlineSnapshot(`\n        Object {\n          \"logs\": Array [\n            Array [\n              \"info\",\n              \"JWT service initialized!\",\n            ],\n          ],\n          \"times\": Array [\n            Array [],\n          ],\n          \"token\": Object {\n            \"expiresAt\": 1390867200000,\n            \"issuedAt\": 1390694400000,\n            \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpYXQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0\",\n            \"validAt\": 1390694400000,\n          },\n        }\n      `);\n    });\n\n    test('should work with an overriden config', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        JWT_SECRET_ENV_NAME: 'REFRESH_JWT_SECRET',\n        ENV: {\n          REFRESH_JWT_SECRET: 'secret',\n        },\n        JWT: {\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n      const token = await jwt.sign({\n        userId: 2,\n        organisationId: 3,\n      });\n\n      expect({\n        token,\n        logs: log.mock.calls,\n        times: time.mock.calls,\n      }).toMatchInlineSnapshot(`\n        Object {\n          \"logs\": Array [\n            Array [\n              \"info\",\n              \"JWT service initialized!\",\n            ],\n          ],\n          \"times\": Array [\n            Array [],\n          ],\n          \"token\": Object {\n            \"expiresAt\": 1390867200000,\n            \"issuedAt\": 1390694400000,\n            \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpYXQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0\",\n            \"validAt\": 1390694400000,\n          },\n        }\n      `);\n    });\n\n    test('should fail with a bad algorithm', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        ENV: { SECRET_NAME: 'secret' },\n        JWT: {\n          secretEnvName: 'SECRET_NAME',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n\n      try {\n        await jwt.sign(\n          {\n            userId: 2,\n            organisationId: 3,\n          },\n          'LOLALG',\n        );\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_UNKNOWN_ALGORYTHM\",\n            \"errorParams\": Array [\n              \"LOLALG\",\n              Array [\n                \"HS256\",\n              ],\n            ],\n            \"logs\": Array [\n              Array [\n                \"info\",\n                \"JWT service initialized!\",\n              ],\n            ],\n            \"times\": Array [\n              Array [],\n            ],\n          }\n        `);\n      }\n    });\n  });\n\n  describe('verify', () => {\n    test('should work', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        ENV: { SECRET_NAME: 'secret' },\n        JWT: {\n          secretEnvName: 'SECRET_NAME',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n      const decoded = await jwt.verify(\n        'eyJhbGciOiJIUzI1NiJ9.' +\n          'eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpY' +\n          'XQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.' +\n          'DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0',\n      );\n\n      expect({\n        decoded,\n        logs: log.mock.calls,\n        times: time.mock.calls,\n      }).toMatchInlineSnapshot(`\n        Object {\n          \"decoded\": Object {\n            \"exp\": 1390867200,\n            \"iat\": 1390694400,\n            \"nbf\": 1390694400,\n            \"organisationId\": 3,\n            \"userId\": 2,\n          },\n          \"logs\": Array [\n            Array [\n              \"info\",\n              \"JWT service initialized!\",\n            ],\n          ],\n          \"times\": Array [\n            Array [],\n          ],\n        }\n      `);\n    });\n\n    test('should fail after the validity duration', async () => {\n      time.mockReturnValueOnce(new Date('2014-03-30T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        ENV: { SECRET_NAME: 'secret' },\n        JWT: {\n          secretEnvName: 'SECRET_NAME',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n\n      try {\n        await jwt.verify(\n          'eyJhbGciOiJIUzI1NiJ9.' +\n            'eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpY' +\n            'XQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.' +\n            'DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0',\n        );\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_JWT_EXPIRED\",\n            \"errorParams\": Array [\n              \"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpYXQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0\",\n              \"jwt expired\",\n            ],\n            \"logs\": Array [\n              Array [\n                \"info\",\n                \"JWT service initialized!\",\n              ],\n            ],\n            \"times\": Array [\n              Array [],\n            ],\n          }\n        `);\n      }\n    });\n\n    test('should fail with a malformed token', async () => {\n      time.mockReturnValueOnce(new Date('2014-03-30T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        ENV: { SECRET_NAME: 'secret' },\n        JWT: {\n          secretEnvName: 'SECRET_NAME',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n\n      try {\n        await jwt.verify('kikooolol');\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: (err as YError).code,\n          errorParams: (err as YError).params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchInlineSnapshot(`\n          Object {\n            \"errorCode\": \"E_JWT_MALFORMED\",\n            \"errorParams\": Array [\n              \"kikooolol\",\n              \"jwt malformed\",\n            ],\n            \"logs\": Array [\n              Array [\n                \"info\",\n                \"JWT service initialized!\",\n              ],\n            ],\n            \"times\": Array [\n              Array [],\n            ],\n          }\n        `);\n      }\n    });\n  });\n});\n"],"mappings":"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"}