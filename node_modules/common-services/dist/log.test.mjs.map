{"version":3,"file":"log.test.mjs","names":["Knifecycle","constant","initLogService","describe","logger","output","jest","fn","error","debug","beforeEach","mockReset","test","done","then","expect","mock","calls","toMatchInlineSnapshot","catch","log","mockClear","register","run"],"sources":["../src/log.test.ts"],"sourcesContent":["import Knifecycle, { constant } from 'knifecycle';\nimport initLogService from './log';\nimport type { LogService } from '.';\n\ndescribe('initLogService', () => {\n  const logger = { output: jest.fn(), error: jest.fn(), debug: jest.fn() };\n\n  beforeEach(() => {\n    logger.output.mockReset();\n    logger.error.mockReset();\n    logger.debug.mockReset();\n  });\n\n  test('should work', (done) => {\n    initLogService({\n      logger,\n    })\n      .then((fn) => {\n        expect('function' === typeof fn);\n        expect(logger.debug.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"ðŸ‘£ - Logging service initialized.\",\n            ],\n          ]\n        `);\n        expect(logger.output.mock.calls).toMatchInlineSnapshot(`Array []`);\n        expect(logger.error.mock.calls).toMatchInlineSnapshot(`Array []`);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('log', () => {\n    test('should work', (done) => {\n      initLogService({\n        logger,\n      })\n        .then((log) => {\n          logger.debug.mockClear();\n          log('debug', 'debug test');\n          log('debug-stack', 'debug stack test');\n          log('info', 'info test');\n          log('error', 'error test');\n          log('error-stack', 'error stack test');\n          log('warning', 'warning test');\n          expect(logger.debug.mock.calls).toMatchInlineSnapshot(`\n            Array [\n              Array [\n                \"debug test\",\n              ],\n              Array [\n                \"debug stack test\",\n              ],\n            ]\n          `);\n          expect(logger.output.mock.calls).toMatchInlineSnapshot(`\n            Array [\n              Array [\n                \"info test\",\n              ],\n            ]\n          `);\n          expect(logger.error.mock.calls).toMatchInlineSnapshot(`\n            Array [\n              Array [\n                \"error test\",\n              ],\n              Array [\n                \"error stack test\",\n              ],\n              Array [\n                \"warning test\",\n              ],\n            ]\n          `);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLogService)\n      .register(constant('logger', logger))\n      .run<{ log: LogService }>(['log'])\n      .then(({ log }) => {\n        logger.debug.mockClear();\n        log('debug', 'debug test');\n        log('info', 'info test');\n        expect(logger.debug.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"debug test\",\n            ],\n          ]\n        `);\n        expect(logger.output.mock.calls).toMatchInlineSnapshot(`\n          Array [\n            Array [\n              \"info test\",\n            ],\n          ]\n        `);\n        expect(logger.error.mock.calls).toMatchInlineSnapshot(`Array []`);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,QAArB,QAAqC,YAArC;AACA,OAAOC,cAAP,MAA2B,OAA3B;AAGAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/B,MAAMC,MAAM,GAAG;IAAEC,MAAM,EAAEC,IAAI,CAACC,EAAL,EAAV;IAAqBC,KAAK,EAAEF,IAAI,CAACC,EAAL,EAA5B;IAAuCE,KAAK,EAAEH,IAAI,CAACC,EAAL;EAA9C,CAAf;EAEAG,UAAU,CAAC,MAAM;IACfN,MAAM,CAACC,MAAP,CAAcM,SAAd;IACAP,MAAM,CAACI,KAAP,CAAaG,SAAb;IACAP,MAAM,CAACK,KAAP,CAAaE,SAAb;EACD,CAJS,CAAV;EAMAC,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;IAC5BX,cAAc,CAAC;MACbE;IADa,CAAD,CAAd,CAGGU,IAHH,CAGSP,EAAD,IAAQ;MACZQ,MAAM,CAAC,eAAe,OAAOR,EAAvB,CAAN;MACAQ,MAAM,CAACX,MAAM,CAACK,KAAP,CAAaO,IAAb,CAAkBC,KAAnB,CAAN,CAAgCC,qBAAhC,CAAuD;AAC/D;AACA;AACA;AACA;AACA;AACA,SANQ;MAOAH,MAAM,CAACX,MAAM,CAACC,MAAP,CAAcW,IAAd,CAAmBC,KAApB,CAAN,CAAiCC,qBAAjC,CAAwD,UAAxD;MACAH,MAAM,CAACX,MAAM,CAACI,KAAP,CAAaQ,IAAb,CAAkBC,KAAnB,CAAN,CAAgCC,qBAAhC,CAAuD,UAAvD;IACD,CAdH,EAeGJ,IAfH,CAeQ,MAAMD,IAAI,EAflB,EAgBGM,KAhBH,CAgBSN,IAhBT;EAiBD,CAlBG,CAAJ;EAoBAV,QAAQ,CAAC,KAAD,EAAQ,MAAM;IACpBS,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;MAC5BX,cAAc,CAAC;QACbE;MADa,CAAD,CAAd,CAGGU,IAHH,CAGSM,GAAD,IAAS;QACbhB,MAAM,CAACK,KAAP,CAAaY,SAAb;QACAD,GAAG,CAAC,OAAD,EAAU,YAAV,CAAH;QACAA,GAAG,CAAC,aAAD,EAAgB,kBAAhB,CAAH;QACAA,GAAG,CAAC,MAAD,EAAS,WAAT,CAAH;QACAA,GAAG,CAAC,OAAD,EAAU,YAAV,CAAH;QACAA,GAAG,CAAC,aAAD,EAAgB,kBAAhB,CAAH;QACAA,GAAG,CAAC,SAAD,EAAY,cAAZ,CAAH;QACAL,MAAM,CAACX,MAAM,CAACK,KAAP,CAAaO,IAAb,CAAkBC,KAAnB,CAAN,CAAgCC,qBAAhC,CAAuD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WATU;QAUAH,MAAM,CAACX,MAAM,CAACC,MAAP,CAAcW,IAAd,CAAmBC,KAApB,CAAN,CAAiCC,qBAAjC,CAAwD;AAClE;AACA;AACA;AACA;AACA;AACA,WANU;QAOAH,MAAM,CAACX,MAAM,CAACI,KAAP,CAAaQ,IAAb,CAAkBC,KAAnB,CAAN,CAAgCC,qBAAhC,CAAuD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAZU;MAaD,CAzCH,EA0CGJ,IA1CH,CA0CQ,MAAMD,IAAI,EA1ClB,EA2CGM,KA3CH,CA2CSN,IA3CT;IA4CD,CA7CG,CAAJ;EA8CD,CA/CO,CAAR;EAiDAD,IAAI,CAAC,6BAAD,EAAiCC,IAAD,IAAU;IAC5C,IAAIb,UAAJ,GACGsB,QADH,CACYpB,cADZ,EAEGoB,QAFH,CAEYrB,QAAQ,CAAC,QAAD,EAAWG,MAAX,CAFpB,EAGGmB,GAHH,CAG4B,CAAC,KAAD,CAH5B,EAIGT,IAJH,CAIQ,CAAC;MAAEM;IAAF,CAAD,KAAa;MACjBhB,MAAM,CAACK,KAAP,CAAaY,SAAb;MACAD,GAAG,CAAC,OAAD,EAAU,YAAV,CAAH;MACAA,GAAG,CAAC,MAAD,EAAS,WAAT,CAAH;MACAL,MAAM,CAACX,MAAM,CAACK,KAAP,CAAaO,IAAb,CAAkBC,KAAnB,CAAN,CAAgCC,qBAAhC,CAAuD;AAC/D;AACA;AACA;AACA;AACA;AACA,SANQ;MAOAH,MAAM,CAACX,MAAM,CAACC,MAAP,CAAcW,IAAd,CAAmBC,KAApB,CAAN,CAAiCC,qBAAjC,CAAwD;AAChE;AACA;AACA;AACA;AACA;AACA,SANQ;MAOAH,MAAM,CAACX,MAAM,CAACI,KAAP,CAAaQ,IAAb,CAAkBC,KAAnB,CAAN,CAAgCC,qBAAhC,CAAuD,UAAvD;IACD,CAvBH,EAwBGJ,IAxBH,CAwBQ,MAAMD,IAAI,EAxBlB,EAyBGM,KAzBH,CAyBSN,IAzBT;EA0BD,CA3BG,CAAJ;AA4BD,CA1GO,CAAR"}