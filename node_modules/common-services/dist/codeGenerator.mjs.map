{"version":3,"file":"codeGenerator.mjs","names":["autoService","noop","undefined","EXPLICIT_CHARS","initCodeGenerator","CHARS_SET","random","Math","bind","log","charsSetLength","length","codeGenerator","code","Array","fill","map","floor","join"],"sources":["../src/codeGenerator.ts"],"sourcesContent":["import { autoService } from 'knifecycle';\nimport type { LogService } from './log';\nimport type { RandomService } from './random';\n\nfunction noop(): void {\n  return undefined;\n}\n\nexport type CodeGeneratorServiceConfig = {\n  CHARS_SET?: string;\n};\nexport type CodeGeneratorServiceDependencies = CodeGeneratorServiceConfig & {\n  random: RandomService;\n  log?: LogService;\n};\nexport interface CodeGeneratorService {\n  (length?: number): Promise<string>;\n}\n\n/* Architecture Note #1.7: Code generator\n\nThe `codeGenerator` service provide a service\n that generate random strings composed of\n a character set that avoid recognition\n mistake by humans.\n*/\n\nconst EXPLICIT_CHARS = 'ABCDEFGHJKMNPRSTUVWXYZ23456789';\n\nexport default autoService(initCodeGenerator);\n\n/**\n * Instantiate the codeGenerator service\n * @name initCodeGenerator\n * @function\n * @param  {Object}   services\n * The services to inject\n * @param  {Object}   [services.CHARS_SET = EXPLICIT_CHARS]\n * An optional char set to pick cars into\n * @param  {Object}   [services.random = Math.random]\n * An optional random function to replace the\n * `Math.random` one used by default\n * @return {Promise<Function>}\n * @param  {Object}   [services.log = noop]\n * An optional logging function\n * @return {Promise<Function>}\n * A promise of the codeGenerator function\n * @example\n * import initCodeGenerator from 'common-services/dist/codeGenerator';\n *\n * const codeGenerator = await initCodeGenerator({\n *   log: console.log.bind(console),\n * });\n */\nasync function initCodeGenerator({\n  CHARS_SET = EXPLICIT_CHARS,\n  random = Math.random.bind(Math),\n  log = noop,\n}: CodeGeneratorServiceDependencies): Promise<CodeGeneratorService> {\n  log('debug', `↪️ - Code generation service Initialized!`);\n  const charsSetLength = CHARS_SET.length;\n\n  return codeGenerator;\n\n  /**\n   * Returns a random code\n   * @param  {Number}   [length]\n   * An optional custon code length (defaults to 6)\n   * @return {Promise<String>}\n   * A promise of the generated code\n   * @example\n   * console.log([\n   *   codeGenerator(),\n   *   codeGenerator(),\n   *   codeGenerator(),\n   * ]);\n   * // Prints: ABCDEF,GHJKMN,PRSTUV\n   */\n  async function codeGenerator(length = 6): Promise<string> {\n    const code = new Array(length)\n      .fill('0')\n      .map(() => CHARS_SET[Math.floor(random() * (charsSetLength - 1))])\n      .join('');\n    log('debug', `↪️ - Generated a new code:`, code);\n    return code;\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAW,IAAXA,QAAT,QAA4B,YAA5B;;AAIA,SAASC,IAAT,GAAsB;EACpB,OAAOC,SAAP;AACD;;AAqBD,MAAMC,cAAc,GAAG,gCAAvB;AAEA,eAAeH,QAAW,CAACI,iBAAD,qDAA1B;;AAyBA,eAAeA,iBAAf,CAAiC;EAC/BC,SAAS,GAAGF,cADmB;EAE/BG,MAAM,GAAGC,IAAI,CAACD,MAAL,CAAYE,IAAZ,CAAiBD,IAAjB,CAFsB;EAG/BE,GAAG,GAAGR;AAHyB,CAAjC,EAIoE;EAClEQ,GAAG,CAAC,OAAD,EAAW,2CAAX,CAAH;EACA,MAAMC,cAAc,GAAGL,SAAS,CAACM,MAAjC;EAEA,OAAOC,aAAP;;EAgBA,eAAeA,aAAf,CAA6BD,MAAM,GAAG,CAAtC,EAA0D;IACxD,MAAME,IAAI,GAAG,IAAIC,KAAJ,CAAUH,MAAV,EACVI,IADU,CACL,GADK,EAEVC,GAFU,CAEN,MAAMX,SAAS,CAACE,IAAI,CAACU,KAAL,CAAWX,MAAM,MAAMI,cAAc,GAAG,CAAvB,CAAjB,CAAD,CAFT,EAGVQ,IAHU,CAGL,EAHK,CAAb;IAIAT,GAAG,CAAC,OAAD,EAAW,4BAAX,EAAwCI,IAAxC,CAAH;IACA,OAAOA,IAAP;EACD;AACF"}