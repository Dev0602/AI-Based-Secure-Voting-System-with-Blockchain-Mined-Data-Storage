{"version":3,"file":"log.js","names":["LogOutputTypes","DEFAULT_LOG_CONFIG","stringify","DEFAULT_LOG_ROUTING","error","ERROR","debug","DEBUG","warning","info","OUTPUT","singleton","autoService","initLog","LOG_CONFIG","LOG_ROUTING","logger","log","type","args","output","map","arg","JSON","toString","join"],"sources":["../src/log.ts"],"sourcesContent":["import { autoService, singleton } from 'knifecycle';\nimport type { JsonValue } from 'type-fest';\n\nexport type LogConfig = {\n  stringify: boolean;\n};\nexport interface LogFunction {\n  (...args: JsonValue[]): void;\n}\nexport interface Logger {\n  error: (message: string) => void;\n  output: (message: string) => void;\n  debug: (...args: JsonValue[]) => void;\n}\nexport enum LogOutputTypes {\n  OUTPUT = 'output',\n  ERROR = 'error',\n  DEBUG = 'debug',\n}\nexport type LogTypes =\n  | 'debug'\n  | 'error'\n  | 'info'\n  | 'warning'\n  | 'error-stack'\n  | 'debug-stack';\nexport interface LogService {\n  (type: LogTypes, ...args: JsonValue[]): void;\n}\n\nexport const DEFAULT_LOG_CONFIG: LogConfig = {\n  stringify: false,\n};\nexport const DEFAULT_LOG_ROUTING: Record<LogTypes, LogOutputTypes> = {\n  error: LogOutputTypes.ERROR,\n  debug: LogOutputTypes.DEBUG,\n  warning: LogOutputTypes.ERROR,\n  info: LogOutputTypes.OUTPUT,\n  // The stack type allows to filter logs in testing\n  // since the stack files paths vary between systems\n  // and it is annoying to filter them\n  'error-stack': LogOutputTypes.ERROR,\n  'debug-stack': LogOutputTypes.DEBUG,\n};\nexport type LogServiceConfig = {\n  LOG_CONFIG?: LogConfig;\n  LOG_ROUTING?: { [type: string]: LogOutputTypes };\n};\nexport type LogServiceDependencies = LogServiceConfig & {\n  logger: Logger;\n};\n\n/* Architecture Note #1.1: Logging\n\nI prefer using a unique function with the log type\n in parameter instead of several methods for each\n log types. It is far easyer to mock and to assert\n on logs in my tests.\n\nIf provided, I route debug messages to the `debug`\n node module.\n\n*/\n\nexport default singleton(autoService(initLog));\n\n/**\n * Instantiate the logging service\n * @name initLog\n * @function\n * @param  {Object}   services\n * The services to inject\n * @param  {Object}   services.logger\n * The logger object that output the logs\n * @param  {Function} [services.debug = noop]\n * A debugging function\n * @return {Promise<Function>}\n * A promise of the logging function\n * @example\n * import initLog from 'common-services/dist/log';\n *\n * const log = await initLog({\n *   logger: require('winston'),\n *   debug: require('debug')('myapp'),\n *  });\n */\nasync function initLog({\n  LOG_CONFIG = DEFAULT_LOG_CONFIG,\n  LOG_ROUTING = DEFAULT_LOG_ROUTING,\n  logger,\n}: LogServiceDependencies) {\n  log('debug', 'ðŸ‘£ - Logging service initialized.');\n\n  return log;\n\n  /**\n   * Logging function\n   * @param  {String}  type\n   * Log type\n   * @param  {...*}    args\n   * Log contents\n   * @return {void}\n   * @example\n   * log('debug', 'Luke, I am your father!')\n   */\n  function log(type: LogTypes, ...args: JsonValue[]): void {\n    const output = args\n      .map((arg) =>\n        LOG_CONFIG.stringify\n          ? JSON.stringify(arg)\n          : arg != null\n          ? arg.toString()\n          : '',\n      )\n      .join(' ');\n\n    if (LOG_ROUTING[type] === LogOutputTypes.ERROR) {\n      logger.error(output);\n      return;\n    }\n    if (LOG_ROUTING[type] === LogOutputTypes.OUTPUT) {\n      logger.output(output);\n      return;\n    }\n    logger.debug(...args);\n  }\n}\n"],"mappings":";;;;;;;AAAA;;IAcYA,c;;;WAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,8BAAAA,c;;AAgBL,MAAMC,kBAA6B,GAAG;EAC3CC,SAAS,EAAE;AADgC,CAAtC;;AAGA,MAAMC,mBAAqD,GAAG;EACnEC,KAAK,EAAEJ,cAAc,CAACK,KAD6C;EAEnEC,KAAK,EAAEN,cAAc,CAACO,KAF6C;EAGnEC,OAAO,EAAER,cAAc,CAACK,KAH2C;EAInEI,IAAI,EAAET,cAAc,CAACU,MAJ8C;EAKnE;EACA;EACA;EACA,eAAeV,cAAc,CAACK,KARqC;EASnE,eAAeL,cAAc,CAACO;AATqC,CAA9D;;;AAmBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;eAEe,IAAAI,qBAAA,EAAU,IAAAC,mBAAA,EAAYC,OAAZ,mDAAV,C;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,eAAeA,OAAf,CAAuB;EACrBC,UAAU,GAAGb,kBADQ;EAErBc,WAAW,GAAGZ,mBAFO;EAGrBa;AAHqB,CAAvB,EAI2B;EACzBC,GAAG,CAAC,OAAD,EAAU,mCAAV,CAAH;EAEA,OAAOA,GAAP;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,SAASA,GAAT,CAAaC,IAAb,EAA6B,GAAGC,IAAhC,EAAyD;IACvD,MAAMC,MAAM,GAAGD,IAAI,CAChBE,GADY,CACPC,GAAD,IACHR,UAAU,CAACZ,SAAX,GACIqB,IAAI,CAACrB,SAAL,CAAeoB,GAAf,CADJ,GAEIA,GAAG,IAAI,IAAP,GACAA,GAAG,CAACE,QAAJ,EADA,GAEA,EANO,EAQZC,IARY,CAQP,GARO,CAAf;;IAUA,IAAIV,WAAW,CAACG,IAAD,CAAX,KAAsBlB,cAAc,CAACK,KAAzC,EAAgD;MAC9CW,MAAM,CAACZ,KAAP,CAAagB,MAAb;MACA;IACD;;IACD,IAAIL,WAAW,CAACG,IAAD,CAAX,KAAsBlB,cAAc,CAACU,MAAzC,EAAiD;MAC/CM,MAAM,CAACI,MAAP,CAAcA,MAAd;MACA;IACD;;IACDJ,MAAM,CAACV,KAAP,CAAa,GAAGa,IAAhB;EACD;AACF"}