import { service as _service, singleton } from 'knifecycle';
export let LogOutputTypes;

(function (LogOutputTypes) {
  LogOutputTypes["OUTPUT"] = "output";
  LogOutputTypes["ERROR"] = "error";
  LogOutputTypes["DEBUG"] = "debug";
})(LogOutputTypes || (LogOutputTypes = {}));

export const DEFAULT_LOG_CONFIG = {
  stringify: false
};
export const DEFAULT_LOG_ROUTING = {
  error: LogOutputTypes.ERROR,
  debug: LogOutputTypes.DEBUG,
  warning: LogOutputTypes.ERROR,
  info: LogOutputTypes.OUTPUT,
  'error-stack': LogOutputTypes.ERROR,
  'debug-stack': LogOutputTypes.DEBUG
};
export default singleton(_service(initLog, "log", ["?LOG_CONFIG", "?LOG_ROUTING", "logger"]));

async function initLog({
  LOG_CONFIG = DEFAULT_LOG_CONFIG,
  LOG_ROUTING = DEFAULT_LOG_ROUTING,
  logger
}) {
  log('debug', 'ðŸ‘£ - Logging service initialized.');
  return log;

  function log(type, ...args) {
    const output = args.map(arg => LOG_CONFIG.stringify ? JSON.stringify(arg) : arg != null ? arg.toString() : '').join(' ');

    if (LOG_ROUTING[type] === LogOutputTypes.ERROR) {
      logger.error(output);
      return;
    }

    if (LOG_ROUTING[type] === LogOutputTypes.OUTPUT) {
      logger.output(output);
      return;
    }

    logger.debug(...args);
  }
}
//# sourceMappingURL=log.mjs.map