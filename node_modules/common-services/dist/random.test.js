"use strict";

var _knifecycle = _interopRequireWildcard(require("knifecycle"));

var _random = _interopRequireDefault(require("./random"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('initRandomService', () => {
  const log = jest.fn();
  beforeEach(() => {
    log.mockReset();
  });
  test('should work', done => {
    (0, _random.default)({
      log
    }).then(random => {
      expect('function' === typeof random);
      expect(log.mock.calls).toMatchInlineSnapshot(`
          Array [
            Array [
              "debug",
              "ðŸŽ² - Random service initialized.",
            ],
          ]
        `);
    }).then(() => done()).catch(done);
  });
  describe('random', () => {
    test('should work', done => {
      (0, _random.default)({
        log
      }).then(random => {
        log.mockClear();
        const num = random();
        expect(log.mock.calls).toEqual([['debug', 'ðŸŽ² - Created a random number:', num]]);
      }).then(() => done()).catch(done);
    });
  });
  test('should work with Knifecycle', done => {
    new _knifecycle.default().register(_random.default).register((0, _knifecycle.constant)('log', log)).run(['random']).then(({
      random
    }) => {
      expect(random).toBeDefined();
      expect(log.mock.calls).toMatchInlineSnapshot(`
          Array [
            Array [
              "debug",
              "ðŸŽ² - Random service initialized.",
            ],
          ]
        `);
    }).then(() => done()).catch(done);
  });
});
//# sourceMappingURL=random.test.js.map